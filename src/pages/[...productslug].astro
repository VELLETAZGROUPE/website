---
import Head from "../components/Head.astro";
import Render from "../components/Render.astro";
import Fonts from "../styles/fonts.astro";
import Colors from "../styles/colors.astro";
import Filters from "../styles/filters.astro";

import {request} from "./request.js";

import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

import "../styles/global.css";

export async function getStaticPaths() {
  let QUERY, URL;

  //FETCH PAGE, CAT CONTENT
  QUERY = encodeURIComponent(`*[_type=="products"]{${request}}`);

  // Compose the URL for your project's endpoint and add the query
  URL = `https://${
    import.meta.env.PROJECT_ID
  }.api.sanity.io/v2021-10-21/data/query/${
    import.meta.env.DATASET
  }?query=${QUERY}`;
  // fetch the content
  let data = await fetch(URL)
    .then((res) => res.json())
    .then(({result}) => {
      return result;
    })
    .catch((err) => console.error(err));

  let pages = data.map((page) => {
    return {
      productslug: page.seo.slug,
      seo: page.seo,
      content: page.content,
    };
  });
  return pages.map(({productslug, seo, content}) => {
    if (productslug == null) {
      productslug = undefined;
    }
    return {
      params: {productslug},
      props: {seo, content},
    };
  });
}

const {productslug} = Astro.params;
console.log(productslug);
const {seo, content} = Astro.props;

//ADD EAGER LOADING TO FIRST IMAGE
let eager = 0;
if (content) {
  for (let i = 0; i < content.length; i++) {
    if (!eager) {
      if ("img" in content[i]) {
        if (content[i].img) {
          eager = 1;
          content[i].img.eager = true;
        }
      }
    }
  }
}
---

<html lang="fr">
  <Head seo={seo} />
  <Fonts />
  <Colors />
  <body>
    <a
      class="back-to-top h-12 w-12 flex fixed right-8 bottom-8 z-10 rounded-full bg-[var(--color-body)] invisible opacity-0 transition-all hover:bg-[var(--color-body-dim1)] [&.back-to-top--is-visible]:visible [&.back-to-top--is-visible]:opacity-100 js-back-to-top"
      href="#top"
      data-offset="100">
      <svg
        class="h-5 w-5 block m-auto fill-current text-[var(--color-bg)] leading-none"
        viewBox="0 0 20 20">
        <polyline
          points="2 13 10 5 18 13"
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2">
        </polyline>
      </svg>
    </a>
    <Header />
    <div id="top" class="wrap-margin">
      <Render data={content} />
    </div>
    <Footer />
    <Filters />
    <script>
      import "../scripts/components1";
      import "../scripts/components2";
      import "../scripts/components3";
      import "../scripts/lenis.js";

      import simpleParallax from "simple-parallax-js";
      let textWrap = document.querySelector(".textwrap");
      if (textWrap) {
        if (window.matchMedia("(min-width: 1024px)").matches) {
          textWrap.classList.add("sceneTextRight");
        } else {
          textWrap.classList.remove("sceneTextRight");
        }
      }
      let parallaxVertical = document.querySelectorAll(".sceneVertical");
      new simpleParallax(parallaxVertical, {
        scale: 1.4,
        delay: 0.6,
        transition: "cubic-bezier(0,0,0,1)",
      });
      let parallaxVerticalOverflow = document.querySelectorAll(
        ".sceneVerticalOverflow"
      );
      new simpleParallax(parallaxVerticalOverflow, {
        scale: 1.4,
        delay: 0.6,
        transition: "cubic-bezier(0,0,0,1)",
        overflow: true,
      });
      let parallaxVerticalSmall = document.querySelectorAll(
        ".sceneVerticalSmall"
      );
      new simpleParallax(parallaxVerticalSmall, {
        scale: 1.1,
        delay: 0.6,
        transition: "cubic-bezier(0,0,0,1)",
      });
      let parallaxHorizontal = document.querySelectorAll(".sceneHorizontal");
      new simpleParallax(parallaxHorizontal, {
        orientation: "right",
        scale: 1.8,
        delay: 0.6,
        transition: "cubic-bezier(0,0,0,1)",
      });
      let parallaxTextRight = document.querySelectorAll(".sceneTextRight");
      new simpleParallax(parallaxTextRight, {
        orientation: "right",
        scale: 1.8,
        delay: 0.6,
        transition: "cubic-bezier(0,0,0,1)",
        overflow: "true",
      });
      let parallaxTextBottom = document.querySelectorAll(".sceneTextBottom");
      new simpleParallax(parallaxTextBottom, {
        orientation: "down",
        scale: 1.8,
        delay: 0.6,
        transition: "cubic-bezier(0,0,0,1)",
        overflow: "true",
      });
      // File#: _1_back-to-top
      // Usage: codyhouse.co/license
      (function () {
        var backTop = document.getElementsByClassName("js-back-to-top")[0];
        if (backTop) {
          var dataElement = backTop.getAttribute("data-element");
          var scrollElement = dataElement
            ? document.querySelector(dataElement)
            : window;
          var scrollOffsetInit =
              parseInt(backTop.getAttribute("data-offset-in")) ||
              parseInt(backTop.getAttribute("data-offset")) ||
              0, //show back-to-top if scrolling > scrollOffset
            scrollOffsetOutInit =
              parseInt(backTop.getAttribute("data-offset-out")) || 0,
            scrollOffset = 0,
            scrollOffsetOut = 0,
            scrolling = false;

          // check if target-in/target-out have been set
          var targetIn = backTop.getAttribute("data-target-in")
              ? document.querySelector(backTop.getAttribute("data-target-in"))
              : false,
            targetOut = backTop.getAttribute("data-target-out")
              ? document.querySelector(backTop.getAttribute("data-target-out"))
              : false;

          updateOffsets();

          //detect click on back-to-top link
          backTop.addEventListener("click", function (event) {
            event.preventDefault();
            if (!window.requestAnimationFrame) {
              scrollElement.scrollTo(0, 0);
            } else {
              dataElement
                ? scrollElement.scrollTo({top: 0, behavior: "smooth"})
                : window.scrollTo({top: 0, behavior: "smooth"});
            }
            //move the focus to the #top-element - don't break keyboard navigation
            moveFocus(
              document.getElementById(
                backTop.getAttribute("href").replace("#", "")
              )
            );
          });

          //listen to the window scroll and update back-to-top visibility
          checkBackToTop();
          if (scrollOffset > 0 || scrollOffsetOut > 0) {
            scrollElement.addEventListener("scroll", function (event) {
              if (!scrolling) {
                scrolling = true;
                !window.requestAnimationFrame
                  ? setTimeout(function () {
                      checkBackToTop();
                    }, 250)
                  : window.requestAnimationFrame(checkBackToTop);
              }
            });
          }

          function checkBackToTop() {
            updateOffsets();
            var windowTop =
              scrollElement.scrollTop || document.documentElement.scrollTop;
            if (!dataElement)
              windowTop = window.scrollY || document.documentElement.scrollTop;
            var condition = windowTop >= scrollOffset;
            if (scrollOffsetOut > 0) {
              condition =
                windowTop >= scrollOffset &&
                window.innerHeight + windowTop < scrollOffsetOut;
            }
            backTop.classList.toggle("back-to-top--is-visible", condition);
            scrolling = false;
          }

          function updateOffsets() {
            scrollOffset = getOffset(targetIn, scrollOffsetInit, true);
            scrollOffsetOut = getOffset(targetOut, scrollOffsetOutInit);
          }

          function getOffset(target, startOffset, bool) {
            var offset = 0;
            if (target) {
              var windowTop =
                scrollElement.scrollTop || document.documentElement.scrollTop;
              if (!dataElement)
                windowTop =
                  window.scrollY || document.documentElement.scrollTop;
              var boundingClientRect = target.getBoundingClientRect();
              offset = bool
                ? boundingClientRect.bottom
                : boundingClientRect.top;
              offset = offset + windowTop;
            }
            if (startOffset && startOffset) {
              offset = offset + parseInt(startOffset);
            }
            return offset;
          }

          function moveFocus(element) {
            if (!element) element = document.getElementsByTagName("body")[0];
            element.focus();
            if (document.activeElement !== element) {
              element.setAttribute("tabindex", "-1");
              element.focus();
            }
          }
        }
      })();
    </script>
  </body>
</html>
