---
import {PortableText} from "astro-portabletext";

import Block from "./Block.astro";
import List from "./List.astro";
import Link from "./Link.astro";
import actupreview from "../../sanity-studio/schemaTypes/cmp/actupreview";

const composants = await Astro.glob("./cmp/*.astro");

const {data, context} = Astro.props;
let value;
if (data) {
  value = data.map((e) => ({...e, ...context}));
}
---

<PortableText
  value={value}
  components={{
    mark: {
      link: Link,
    },
    list: {
      bullet: List,
      number: List,
      menu: List,
    },
    block: {
      h1: Block,
      h2: Block,
      h3: Block,
      h4: Block,
      h5: Block,
      h6: Block,
      blockquote: Block,
      normal: Block,
    },
    type: {
      feature: composants.find((cmp) => cmp.default.name === "features")
        .default,
      hero: composants.find((cmp) => cmp.default.name === "hero").default,
      section: composants.find((cmp) => cmp.default.name === "section").default,
      tableofcontent: composants.find((cmp) => cmp.default.name === "layoutToc")
        .default,
      biglist: composants.find((cmp) => cmp.default.name === "bigListWithLogo")
        .default,
      productlist: composants.find(
        (cmp) => cmp.default.name === "filteredProductsGallery"
      ).default,
      map: composants.find((cmp) => cmp.default.name === "map").default,
      logogallery: composants.find((cmp) => cmp.default.name === "logoGallery")
        .default,
      actupreview: composants.find((cmp) => cmp.default.name === "actuPreview")
        .default,
    },
  }}
/>
