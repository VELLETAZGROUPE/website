---
import HN from "../HN.astro";
import {PortableText} from "astro-portabletext";
import Button from "../Button.astro";
import Link from "../Link.astro";

const year = new Date().getFullYear() - 1987;

let {node} = Astro.props;
---

<div
  class={`hero full ${node.fullscreen ? "h-screen" : ""} after:content-['*'] after:absolute after:top-0 after:left-0 after:h-full after:w-full ${node.opacity > 0 ? "colorbg" : "colorbody"} after:opacity-${Math.abs(node.opacity)} after:z-[1] relative z-[1] py-16 lg:py-28 px-0 bg-gray-100 bg-cover bg-no-repeat bg-center text-center ${node.textcolor == "bg" ? "clair" : "fonce"}`}
  style=`background-image: url('${node.img.src}')`>
  <div
    class={`w-[calc(100%_-_3rem)] mx-auto max-w-lg sm:max-w-3xl relative z-[2] texte ${node.blur == "lo" ? "backdrop-blur-sm" : node.blur == "hi" ? "backdrop-blur-3xl" : "backdrop-blur-xl"}`}>
    {
      node.texte && (
        <div class="h4 mx-auto p-4" data-year={year}>
          <PortableText
            value={node.texte}
            components={{
              mark: {
                link: Link,
                internalLink: Link,
              },
              type: {
                button: Button,
              },
            }}
          />
        </div>
      )
    }
  </div>
</div>

<style>
  .h4 :global(a) {
    text-decoration: underline;
    cursor: pointer;
    white-space: break-spaces;
  }
  :global(section):has(.full) {
    position: relative;
  }

  .full.clair {
    @apply text-[var(--color-bg)];
  }
  .full.fonce {
    @apply text-[var(--color-body)];
  }

  .full.colorbg {
    @apply after:bg-[var(--color-bg)];
  }
  .full.colorbody {
    @apply after:bg-[var(--color-body)];
  }
</style>
