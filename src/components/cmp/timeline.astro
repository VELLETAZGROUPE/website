---
import {PortableText} from "astro-portabletext";
import Button from "../Button.astro";

const {node} = Astro.props;
---

<div class="relative z-[1] overflow-hidden py-12 lg:py-20">
  <div class="mb-8 lg:mb-12 flex flex-col justify-center items-center title">
    <PortableText
      value={node.title}
      components={{
        type: {
          button: Button,
        },
      }}
    />
  </div>

  <div
    class="w-[calc(100%_-_2.5rem)] lg:w-[calc(100%_-_4rem)] mx-auto max-w-lg md:max-w-3xl lg:max-w-5xl xl:max-w-7xl">
    <div class="v-timeline js-v-timeline" data-animation="on">
      {
        node.events &&
          node.events.map((event) => (
            <section class="v-timeline__section js-v-timeline__section">
              <div
                class="v-timeline__marker bg-[var(--color-accent1)] border-[3px]"
                aria-hidden="true"
              />

              <div class="v-timeline__items-group">
                <div class="v-timeline__item bg-[var(--color-accent1)] text-[var(--color-bg)] p-5 lg:p-8 rounded shadow-sm">
                  <div class="v-timeline__date mb-3 lg:mb-5">
                    <time
                      class="v-timeline__date-value text-sm text-[var(--color-bg)]"
                      datetime={event.year}>
                      {event.year}
                    </time>
                  </div>

                  <div class="timelineContent">
                    <PortableText value={event.content} />
                  </div>
                </div>
              </div>
            </section>
          ))
      }
    </div>
  </div>
</div>

<style>
  .timelineContent :global(h1),
  .timelineContent :global(h2),
  .timelineContent :global(h3),
  .timelineContent :global(h4),
  .timelineContent :global(h5),
  .timelineContent :global(h6) {
    font-size: var(--size-l);
    text-shadow: none;
  }

  .title :global(h1),
  .title :global(h2),
  .title :global(h3),
  .title :global(h4),
  .title :global(h5),
  .title :global(h6) {
    text-align: center;
  }

  :root {
    --v-timeline-marker-size: 16px;
    --v-timeline-track-width: 2px;
    --v-timeline-triangle-size: 12px;
    --v-timeline-sections-gap: 2rem;
    --v-timeline-items-gap: 0.75rem;
  }
  @media (min-width: 64rem) {
    :root {
      --v-timeline-sections-gap: 3.125rem;
      --v-timeline-items-gap: 1.125rem;
    }
  }

  .v-timeline {
    position: relative;
    @apply py-8 lg:py-12 px-0;
  }
  .v-timeline::before {
    content: "";
    position: absolute;
    top: 0;
    left: calc(
      (var(--v-timeline-marker-size) - var(--v-timeline-track-width)) * 0.5
    );
    height: 100%;
    width: var(--v-timeline-track-width);
    @apply bg-[var(--color-accent2)];
  }

  .v-timeline__section {
    position: relative;
    display: flex;
  }
  .v-timeline__section:not(:last-of-type) {
    margin-bottom: var(--v-timeline-sections-gap);
  }

  .v-timeline__marker {
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    display: flex;
    position: relative;
    height: var(--v-timeline-marker-size);
    width: var(--v-timeline-marker-size);
    border-radius: 50%;
    margin-right: calc(var(--v-timeline-triangle-size) + 0.375rem);
  }
  @media (min-width: 64rem) {
    .v-timeline__marker {
      margin-right: calc(var(--v-timeline-triangle-size) + 0.5625rem);
    }
  }

  .v-timeline__item {
    position: relative;
    top: calc(0.5 * var(--v-timeline-marker-size));
    flex-grow: 1;
  }
  .v-timeline__item::before {
    content: "";
    position: absolute;
    top: 0;
    left: calc(-1 * var(--v-timeline-triangle-size) + 1px);
    height: var(--v-timeline-triangle-size);
    width: var(--v-timeline-triangle-size);
    background-color: inherit;
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%);
  }
  .v-timeline__item:not(:last-child) {
    margin-bottom: var(--v-timeline-items-gap);
  }
  .v-timeline__item:not(:first-child) .v-timeline__date {
    display: none;
  }
  .v-timeline__item:not(:first-child)::before {
    display: none;
  }

  .v-timeline__date-value {
    @apply text-[var(--color-bg)] lg:text-[var(--color-accent2)];
    font-size: var(--size-xl);
    font-family: var(--headings);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  @media not all and (min-width: 64rem) {
    .v-timeline__item:first-child {
      border-top-left-radius: 0;
    }
  }
  @media (min-width: 64rem) {
    .v-timeline::before {
      left: calc(50% - var(--v-timeline-track-width) / 2);
    }

    .v-timeline__section {
      width: calc(50% + var(--v-timeline-marker-size) / 2);
    }
    .v-timeline__section:nth-child(odd) {
      flex-direction: row-reverse;
    }
    .v-timeline__section:nth-child(odd) .v-timeline__marker {
      margin-right: 0;
      margin-left: calc(var(--v-timeline-triangle-size) + 0.5625rem);
    }
    .v-timeline__section:nth-child(odd) .v-timeline__item::before {
      left: auto;
      right: calc(-1 * var(--v-timeline-triangle-size) + 1px);
      transform: scaleX(-1);
    }
    .v-timeline__section:nth-child(odd) .v-timeline__item:first-child {
      border-top-right-radius: 0;
    }
    .v-timeline__section:nth-child(odd) .v-timeline__date {
      right: calc(
        -2 * (var(--v-timeline-triangle-size) + 0.5625rem) - var(--v-timeline-marker-size)
      );
      transform: translateX(100%) translateY(-50%);
    }
    .v-timeline__section:nth-child(even) {
      margin-left: auto;
    }
    .v-timeline__section:nth-child(even) .v-timeline__item:first-child {
      border-top-left-radius: 0;
    }
    .v-timeline__section:nth-child(even) .v-timeline__date {
      left: calc(
        -2 * (var(--v-timeline-triangle-size) + 0.5625rem) - var(--v-timeline-marker-size)
      );
      transform: translateX(-100%) translateY(-50%);
    }

    .v-timeline__section--is-hidden {
      opacity: 0;
    }

    .v-timeline__date {
      position: absolute;
      top: 0;
      white-space: nowrap;
    }

    .v-timeline[data-animation="on"] .v-timeline__marker {
      opacity: 0;
      transform: scale(0.5);
      transition:
        transform 0.6s cubic-bezier(0.215, 0.61, 0.355, 1),
        opacity 0.6s;
    }
    .v-timeline[data-animation="on"] .v-timeline__item {
      opacity: 0;
      transition:
        transform 0.6s cubic-bezier(0.215, 0.61, 0.355, 1),
        opacity 0.6s;
    }
    .v-timeline[data-animation="on"]
      .v-timeline__section:nth-child(odd)
      .v-timeline__item {
      transform: translateX(-50px);
    }
    .v-timeline[data-animation="on"]
      .v-timeline__section:nth-child(even)
      .v-timeline__item {
      transform: translateX(50px);
    }
    .v-timeline[data-animation="on"]
      .v-timeline__section--animate
      .v-timeline__item {
      transform: translateX(0) !important;
      opacity: 1;
    }
    .v-timeline[data-animation="on"]
      .v-timeline__section--animate
      .v-timeline__marker {
      transform: scale(1);
      opacity: 1;
    }
  }
  .v-timeline--icons {
    --v-timeline-marker-size: 3em;
  }
</style>

<script>
  if (!Util) function Util() {}

  Util.addClass = function (el, className) {
    var classList = className.split(" ");
    el.classList.add(classList[0]);
    if (classList.length > 1) Util.addClass(el, classList.slice(1).join(" "));
  };

  Util.osHasReducedMotion = function () {
    if (!window.matchMedia) return false;
    var matchMediaObj = window.matchMedia("(prefers-reduced-motion: reduce)");
    if (matchMediaObj) return matchMediaObj.matches;
    return false;
  };

  // File#: _1_vertical-timeline
  // Usage: codyhouse.co/license
  (function () {
    var VTimeline = function (element) {
      this.element = element;
      this.sections = this.element.getElementsByClassName(
        "js-v-timeline__section"
      );
      this.animate =
        this.element.getAttribute("data-animation") &&
        this.element.getAttribute("data-animation") == "on"
          ? true
          : false;
      this.animationClass = "v-timeline__section--animate";
      this.animationDelta = "-150px";
      initVTimeline(this);
    };

    function initVTimeline(element) {
      if (!element.animate) return;
      for (var i = 0; i < element.sections.length; i++) {
        var observer = new IntersectionObserver(
          vTimelineCallback.bind(element, i),
          {rootMargin: "0px 0px " + element.animationDelta + " 0px"}
        );
        observer.observe(element.sections[i]);
      }
    }

    function vTimelineCallback(index, entries, observer) {
      if (entries[0].isIntersecting) {
        Util.addClass(this.sections[index], this.animationClass);
        observer.unobserve(this.sections[index]);
      }
    }

    //initialize the VTimeline objects
    var timelines = document.querySelectorAll(".js-v-timeline"),
      intersectionObserverSupported =
        "IntersectionObserver" in window &&
        "IntersectionObserverEntry" in window &&
        "intersectionRatio" in window.IntersectionObserverEntry.prototype,
      reducedMotion = Util.osHasReducedMotion();
    if (timelines.length > 0) {
      for (var i = 0; i < timelines.length; i++) {
        if (intersectionObserverSupported && !reducedMotion)
          (function (i) {
            new VTimeline(timelines[i]);
          })(i);
        else timelines[i].removeAttribute("data-animation");
      }
    }
  })();
</script>
