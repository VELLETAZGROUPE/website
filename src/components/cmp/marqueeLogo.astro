---
import {PortableText} from "astro-portabletext";
import Link from "../Link.astro";
import Button from "../Button.astro";
import NetlifyImage from "../NetlifyImage.astro";

const {node} = Astro.props;
---

<section class="my-32">
  <div
    class="my-12 max-w-7xl mx-auto px-0 md:px-[var(--space-m)] lg:px-[var(--space-l)] xl:px-[var(--space-xl)]">
    <PortableText
      value={node.title}
      components={{
        mark: {
          link: Link,
          internalLink: Link,
        },
        type: {
          button: Button,
        },
      }}
    />
  </div>
  <div class="marquee">
    <ul class="marquee-content">
      {
        node.imgarray.map((img) => (
          <li>
            {img.link && (
              <a href={img.link} target="_blank">
                <NetlifyImage
                  src={img.img.src}
                  alt={img.img.alt}
                  class="max-w-32"
                />
              </a>
            )}
            {!img.link && (
              <NetlifyImage
                src={img.img.src}
                alt={img.img.alt}
                class="max-w-32"
              />
            )}
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style>
  :root {
    --marquee-width: 80vw;
    --marquee-height: 200px;
    /* --marquee-elements: 12; */ /* defined with JavaScript */
    --marquee-elements-displayed: 5;
    --marquee-element-width: calc(
      var(--marquee-width) / var(--marquee-elements-displayed)
    );
    --marquee-animation-duration: calc(var(--marquee-elements) * 3s);
  }

  .marquee {
    width: var(--marquee-width);
    height: var(--marquee-height);
    background-color: transparent;
    overflow: hidden;
    position: relative;
    margin-inline: auto;
  }
  .marquee:before,
  .marquee:after {
    position: absolute;
    top: 0;
    width: 10rem;
    height: 100%;
    content: "";
    z-index: 1;
  }
  .marquee:before {
    left: 0;
    background: linear-gradient(to right, var(--color-bg) 0%, transparent 100%);
  }
  .marquee:after {
    right: 0;
    background: linear-gradient(to left, var(--color-bg) 0%, transparent 100%);
  }
  .marquee-content {
    list-style: none;
    height: 100%;
    display: flex;
    animation: scrolling var(--marquee-animation-duration) linear infinite;
  }
  /* .marquee-content:hover {
  animation-play-state: paused;
} */
  @keyframes scrolling {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(
        calc(-1 * var(--marquee-element-width) * var(--marquee-elements))
      );
    }
  }
  .marquee-content li {
    display: flex;
    justify-content: center;
    align-items: center;
    /* text-align: center; */
    flex-shrink: 0;
    width: var(--marquee-element-width);
    max-height: 100%;
    font-size: calc(var(--marquee-height) * 3 / 4); /* 5rem; */
    white-space: nowrap;
  }

  .marquee-content li img {
    width: 100%;
    /* height: 100%; */
    border: 2px solid #eee;
  }

  @media (max-width: 600px) {
    :root {
      --marquee-width: 100vw;
      --marquee-height: 200px;
      --marquee-elements-displayed: 2;
    }
    .marquee:before,
    .marquee:after {
      width: 5rem;
    }
  }
</style>

<script>
  const root = document.documentElement;
  const marqueeElementsDisplayed = getComputedStyle(root).getPropertyValue(
    "--marquee-elements-displayed"
  );
  const marqueeContent = document.querySelector("ul.marquee-content");

  if (marqueeContent) {
    root.style.setProperty(
      "--marquee-elements",
      marqueeContent.children.length
    );

    for (let i = 0; i < marqueeElementsDisplayed; i++) {
      marqueeContent.appendChild(marqueeContent.children[i].cloneNode(true));
    }
  }
</script>
