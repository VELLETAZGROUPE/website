---
import {PortableText} from "astro-portabletext";
import Button from "../Button.astro";
import NetlifyImage from "../NetlifyImage.astro";
const {node} = Astro.props;
---

<section class="py-12 lg:py-20 max-w-7xl mx-auto">
  {
    node.title && (
      <div class="flex flex-col justify-center items-center">
        <PortableText
          value={node.title}
          components={{
            type: {
              button: Button,
            },
          }}
        />
      </div>
    )
  }

  <div class="mx-auto max-w-lg lg:max-w-5xl xl:max-w-7xl">
    <ul class="feature-v20__list grid grid-cols-12 gap-0 lg:gap-8">
      {
        node.members.map((member, idx) => (
          <li class="relative feature-v20__item min-w-0 col-span-12 md:col-span-6 lg:col-span-3 flex justify-center max-w-[300px] justify-self-center">
            <button
              class="modal-img-btn rounded"
              aria-controls={`modal-${idx + 1}`}
              aria-label="Show larger image preview">
              <div class="person">
                <div class="wrap">
                  <div class="wrap-inner">
                    <svg
                      class="circle"
                      height="400"
                      width="400"
                      xmlns="http://www.w3.org/2000/svg">
                      <circle
                        r="400"
                        cx="200"
                        cy="200"
                        fill="var(--color-accent1)"
                      />
                    </svg>
                    <img class="img img1" src={member.img.src} />
                  </div>
                </div>
                <div class="divider" />
                <div class="name text-center">{member.name}</div>
                <div class="title text-center">{member.poste}</div>
              </div>
            </button>
            <div
              id={`modal-${idx + 1}`}
              class="modal modal--animate-scale flex justify-center items-center bg-gray-900/90 p-5 lg:p-8 js-modal"
              data-modal-prevent-scroll="html">
              <div
                class="modal__content w-full max-h-full overflow-auto bg-white rounded shadow-lg max-w-5xl"
                role="alertdialog"
                aria-labelledby="modal-title-1"
                aria-describedby="modal-description-1">
                <header class="bg-gray-300/50 py-3 lg:py-5 px-5 lg:px-8 flex flex-col items-center justify-between">
                  <p id="modal-title-1" class="truncate h3 font1">
                    {`${member.name} - ${member.poste}`}
                  </p>
                  <p class="h5 font2">{`Mill√©sime ${member.millesime}`}</p>
                </header>

                <div class="py-3 lg:py-5 px-5 lg:px-8">
                  <p class="h4">Sa devise</p>
                  <p set:text={member.devise} />
                  <p class="h4">Son parcours</p>
                  <p set:text={member.parcours} />
                  <p class="h4">Ce qu'il ou elle aime</p>
                  <p set:text={member.aime} />
                  <p class="h4">Ce qu'il ou elle n'aime pas</p>
                  <p set:text={member.aimepas} />
                  <p class="h4">Son c√©page pr√©f√©r√©</p>
                  <p set:text={member.cepage} />
                  <p class="h4">Une de ses (nombreuses) qualit√©s</p>
                  <p set:text={member.qualite} />
                  <p class="h4">Un de ses d√©fauts</p>
                  <p set:text={member.defaut} />
                  <p class="h4">Une anecdote</p>
                  <p set:text={member.anecdote} />
                </div>
              </div>

              <button class="modal__close-btn modal__close-btn--outer hidden lg:flex js-modal__close js-tab-focus">
                <svg
                  class="icon inline-block text-inherit fill-current leading-none shrink-0 w-[24px] h-[24px]"
                  viewBox="0 0 24 24">
                  <title>Close modal window</title>
                  <g
                    fill="none"
                    stroke="currentColor"
                    stroke-miterlimit="10"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round">
                    <line x1="3" y1="3" x2="21" y2="21" />
                    <line x1="21" y1="3" x2="3" y2="21" />
                  </g>
                </svg>
              </button>
            </div>
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style>
  .person {
    align-items: center;
    display: flex;
    flex-direction: column;
    width: 280px;
  }
  .wrap {
    border-radius: 50%;
    height: 312px;
    -webkit-tap-highlight-color: transparent;
    transform: scale(0.48);
    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);
    width: 400px;
  }
  .wrap:after {
    background-color: #f2f2f2;
    content: "";
    height: 10px;
    position: absolute;
    top: 390px;
    width: 100%;
  }
  .wrap:hover {
    transform: scale(0.54);
  }
  .wrap-inner {
    clip-path: path(
      "M 390,400 C 390,504.9341 304.9341,590 200,590 95.065898,590 10,504.9341 10,400 V 10 H 200 390 Z"
    );
    position: relative;
    transform-origin: 50%;
    top: -200px;
  }
  .circle {
    background-color: #fee7d3;
    border-radius: 50%;
    cursor: pointer;
    height: 380px;
    left: 10px;
    pointer-events: none;
    position: absolute;
    top: 210px;
    width: 380px;
  }
  .img {
    pointer-events: none;
    position: relative;
    transform: translateY(20px) scale(1.15);
    transform-origin: 50% bottom;
    transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  .wrap:hover .img {
    transform: translateY(0) scale(1.2);
  }
  .img1 {
    left: 22px;
    top: 164px;
    width: 340px;
  }
  .img2 {
    left: -46px;
    top: 174px;
    width: 444px;
  }
  .img3 {
    left: -16px;
    top: 144px;
    width: 466px;
  }
  .divider {
    background-color: var(--color-accent1);
    height: 1px;
    width: 160px;
  }

  .title {
    color: var(--color-body-dim2);
    font-size: 14px;
    font-style: italic;
    margin-top: 4px;
  }

  .modal__content :global(ul) {
    list-style: inside disc;
  }

  .modal {
    position: fixed;
    @apply z-[15];
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    opacity: 0;
    visibility: hidden;
  }
  .modal:not(.modal--is-visible) {
    pointer-events: none;
    background-color: transparent;
  }

  .modal--is-visible {
    opacity: 1;
    visibility: visible;
  }

  /* close button */
  .modal__close-btn {
    display: flex;
    flex-shrink: 0;
    border-radius: 50%;
    transition: 0.2s;
  }
  .modal__close-btn .icon {
    display: block;
    margin: auto;
  }

  .modal__close-btn--outer {
    /* close button - outside the modal__content */
    width: 48px;
    height: 48px;
    position: fixed;
    @apply top-3 lg:top-5;
    @apply right-3 lg:right-5;
    @apply z-10;
    @apply bg-gray-900/90;
    transition: 0.2s;
  }
  .modal__close-btn--outer .icon {
    @apply text-white;
    /* icon color */
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  }
  .modal__close-btn--outer:hover {
    @apply bg-gray-900/100;
  }
  .modal__close-btn--outer:hover .icon {
    transform: scale(1.1);
  }

  .modal__close-btn--inner {
    /* close button - inside the modal__content */
    --size: 32px;
    width: var(--size);
    height: var(--size);
    @apply bg-white;
    @apply shadow-md;
    transition: 0.2s;
  }
  .modal__close-btn--inner .icon {
    color: inherit;
    /* icon color */
  }
  .modal__close-btn--inner:hover {
    @apply bg-white;
    @apply shadow-lg;
  }

  /* animations */
  :root {
    --modal-transition-duration: 0.2s;
    /* fallback (i.e., unless specified differently in the variations üëá) */
  }

  @media (prefers-reduced-motion: no-preference) {
    .modal--animate-fade {
      --modal-transition-duration: 0.2s;
      transition:
        opacity var(--modal-transition-duration),
        background-color var(--modal-transition-duration),
        visibility 0s var(--modal-transition-duration);
    }
    .modal--animate-fade.modal--is-visible {
      transition:
        opacity var(--modal-transition-duration),
        background-color var(--modal-transition-duration),
        visibility 0s;
    }

    .modal--animate-scale,
    .modal--animate-translate-up,
    .modal--animate-translate-down,
    .modal--animate-translate-right,
    .modal--animate-translate-left {
      --modal-transition-duration: 0.2s;
      transition:
        opacity var(--modal-transition-duration),
        background-color var(--modal-transition-duration),
        visibility 0s var(--modal-transition-duration);
    }
    .modal--animate-scale .modal__content,
    .modal--animate-translate-up .modal__content,
    .modal--animate-translate-down .modal__content,
    .modal--animate-translate-right .modal__content,
    .modal--animate-translate-left .modal__content {
      will-change: transform;
      transition: -webkit-transform var(--modal-transition-duration)
        cubic-bezier(0.215, 0.61, 0.355, 1);
      transition: transform var(--modal-transition-duration)
        cubic-bezier(0.215, 0.61, 0.355, 1);
      transition:
        transform var(--modal-transition-duration)
          cubic-bezier(0.215, 0.61, 0.355, 1),
        -webkit-transform var(--modal-transition-duration) cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    .modal--animate-scale.modal--is-visible,
    .modal--animate-translate-up.modal--is-visible,
    .modal--animate-translate-down.modal--is-visible,
    .modal--animate-translate-right.modal--is-visible,
    .modal--animate-translate-left.modal--is-visible {
      transition:
        opacity var(--modal-transition-duration),
        background-color var(--modal-transition-duration),
        visibility 0s;
    }
    .modal--animate-scale.modal--is-visible .modal__content,
    .modal--animate-translate-up.modal--is-visible .modal__content,
    .modal--animate-translate-down.modal--is-visible .modal__content,
    .modal--animate-translate-right.modal--is-visible .modal__content,
    .modal--animate-translate-left.modal--is-visible .modal__content {
      transform: scale(1);
      /* reset all transformations */
    }

    .modal--animate-slide-up,
    .modal--animate-slide-down,
    .modal--animate-slide-right,
    .modal--animate-slide-left {
      --modal-transition-duration: 0.3s;
      transition:
        opacity 0s var(--modal-transition-duration),
        background-color var(--modal-transition-duration),
        visibility 0s var(--modal-transition-duration);
    }
    .modal--animate-slide-up .modal__content,
    .modal--animate-slide-down .modal__content,
    .modal--animate-slide-right .modal__content,
    .modal--animate-slide-left .modal__content {
      will-change: transform;
      transition: -webkit-transform var(--modal-transition-duration)
        cubic-bezier(0.215, 0.61, 0.355, 1);
      transition: transform var(--modal-transition-duration)
        cubic-bezier(0.215, 0.61, 0.355, 1);
      transition:
        transform var(--modal-transition-duration)
          cubic-bezier(0.215, 0.61, 0.355, 1),
        -webkit-transform var(--modal-transition-duration) cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    .modal--animate-slide-up.modal--is-visible,
    .modal--animate-slide-down.modal--is-visible,
    .modal--animate-slide-right.modal--is-visible,
    .modal--animate-slide-left.modal--is-visible {
      transition:
        background-color var(--modal-transition-duration),
        visibility 0s;
    }
    .modal--animate-slide-up.modal--is-visible .modal__content,
    .modal--animate-slide-down.modal--is-visible .modal__content,
    .modal--animate-slide-right.modal--is-visible .modal__content,
    .modal--animate-slide-left.modal--is-visible .modal__content {
      transform: scale(1);
      /* reset all transformations */
    }

    /* scale */
    .modal--animate-scale .modal__content {
      -webkit-transform: scale(0.95);
      transform: scale(0.95);
    }

    /* translate */
    .modal--animate-translate-up .modal__content {
      -webkit-transform: translateY(40px);
      transform: translateY(40px);
    }

    .modal--animate-translate-down .modal__content {
      -webkit-transform: translateY(-40px);
      transform: translateY(-40px);
    }

    .modal--animate-translate-right .modal__content {
      -webkit-transform: translateX(-40px);
      transform: translateX(-40px);
    }

    .modal--animate-translate-left .modal__content {
      -webkit-transform: translateX(40px);
      transform: translateX(40px);
    }

    /* slide */
    .modal--animate-slide-up .modal__content {
      transform: translateY(100%);
    }

    .modal--animate-slide-down .modal__content {
      transform: translateY(-100%);
    }

    .modal--animate-slide-right .modal__content {
      -webkit-transform: translateX(-100%);
      transform: translateX(-100%);
    }

    .modal--animate-slide-left .modal__content {
      -webkit-transform: translateX(100%);
      transform: translateX(100%);
    }
  }
  /* load content - optional */
  .modal--is-loading .modal__content {
    visibility: hidden;
  }
  .modal--is-loading .modal__loader {
    display: flex;
  }

  .modal__loader {
    /* loader icon */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    justify-content: center;
    align-items: center;
    display: none;
    pointer-events: none;
  }

  /* --image */
  .modal-img-btn {
    position: relative;
    cursor: pointer;
    height: 400px;
  }

  .modal-img-btn:hover .modal-img-btn__icon-wrapper {
    opacity: 1;
  }

  .modal-img-btn__icon-wrapper {
    position: absolute;
    z-index: 2;
    top: calc(50% - 24px);
    left: calc(50% - 24px);
    width: 48px;
    height: 48px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    @apply bg-gray-900/70;
    opacity: 0;
    transition: opacity 0.2s;
  }
  .modal-img-btn__icon-wrapper .icon {
    @apply text-white;
  }

  .modal .momentum-scrolling {
    -webkit-overflow-scrolling: touch;
  }

  /* icon loading animation */
  .icon--is-spinning {
    animation: icon-spin 1s infinite linear;
  }

  @keyframes icon-spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  // File#: _1_modal-window
  // Usage: codyhouse.co/license
  (function () {
    var Modal = function (element) {
      this.element = element;
      this.triggers = document.querySelectorAll(
        '[aria-controls="' + this.element.getAttribute("id") + '"]'
      );
      this.firstFocusable = null;
      this.lastFocusable = null;
      this.moveFocusEl = null; // focus will be moved to this element when modal is open
      this.modalFocus = this.element.getAttribute("data-modal-first-focus")
        ? this.element.querySelector(
            this.element.getAttribute("data-modal-first-focus")
          )
        : null;
      this.selectedTrigger = null;
      this.preventScrollEl = this.getPreventScrollEl();
      this.showClass = "todal--is-visible";
      this.initModal();
    };

    Modal.prototype.getPreventScrollEl = function () {
      var scrollEl = false;
      var querySelector = this.element.getAttribute(
        "data-modal-prevent-scroll"
      );
      if (querySelector) scrollEl = document.querySelector(querySelector);
      return scrollEl;
    };

    Modal.prototype.initModal = function () {
      var self = this;
      //open modal when clicking on trigger buttons
      if (this.triggers) {
        for (var i = 0; i < this.triggers.length; i++) {
          this.triggers[i].addEventListener("click", function (event) {
            event.preventDefault();
            // console.log(self.element.className);
            if (self.element.classList.contains(self.showClass)) {
              self.closeModal();
              return;
            }
            self.selectedTrigger = event.currentTarget;

            self.showModal();
            self.initModalEvents();
          });
        }
      }

      // listen to the openModal event -> open modal without a trigger button
      this.element.addEventListener("openModal", function (event) {
        if (event.detail) self.selectedTrigger = event.detail;
        self.showModal();
        self.initModalEvents();
      });

      // listen to the closeModal event -> close modal without a trigger button
      this.element.addEventListener("closeModal", function (event) {
        if (event.detail) self.selectedTrigger = event.detail;
        self.closeModal();
      });

      // if modal is open by default -> initialise modal events
      if (this.element.classList.contains(this.showClass))
        this.initModalEvents();
    };

    Modal.prototype.showModal = function () {
      var self = this;
      this.element.classList.add(this.showClass);
      this.getFocusableElements();
      if (this.moveFocusEl) {
        this.moveFocusEl.focus();
        // wait for the end of transitions before moving focus
        this.element.addEventListener("transitionend", function cb(event) {
          self.moveFocusEl.focus();
          self.element.removeEventListener("transitionend", cb);
        });
      }
      document.documentElement.classList.add("overflow-hidden");
      this.emitModalEvents("modalIsOpen");
      // change the overflow of the preventScrollEl
      if (this.preventScrollEl) this.preventScrollEl.style.overflow = "hidden";
    };

    Modal.prototype.closeModal = function () {
      if (!this.element.classList.contains(this.showClass)) return;
      this.element.classList.remove(this.showClass);
      this.firstFocusable = null;
      this.lastFocusable = null;
      this.moveFocusEl = null;
      if (this.selectedTrigger) this.selectedTrigger.focus();
      //remove listeners
      this.cancelModalEvents();
      this.emitModalEvents("modalIsClose");
      // change the overflow of the preventScrollEl
      if (this.preventScrollEl) this.preventScrollEl.style.overflow = "";
    };

    Modal.prototype.initModalEvents = function () {
      //add event listeners
      console.log(this.element.classList);
      this.element.addEventListener("keydown", this);
      this.element.addEventListener("click", this);
    };

    Modal.prototype.cancelModalEvents = function () {
      //remove event listeners
      this.element.removeEventListener("keydown", this);
      this.element.removeEventListener("click", this);
    };

    Modal.prototype.handleEvent = function (event) {
      switch (event.type) {
        case "click": {
          this.initClick(event);
        }
        case "keydown": {
          this.initKeyDown(event);
        }
      }
    };

    Modal.prototype.initKeyDown = function (event) {
      if (
        (event.keyCode && event.keyCode == 9) ||
        (event.key && event.key == "Tab")
      ) {
        //trap focus inside modal
        this.trapFocus(event);
      } else if (
        ((event.keyCode && event.keyCode == 13) ||
          (event.key && event.key == "Enter")) &&
        event.target.closest(".js-modal__close")
      ) {
        event.preventDefault();
        this.closeModal(); // close modal when pressing Enter on close button
      }
    };

    Modal.prototype.initClick = function (event) {
      //close modal when clicking on close button or modal bg layer
      if (
        !event.target.closest(".js-modal__close") &&
        !event.target.classList.contains("js-modal")
      )
        return;
      event.preventDefault();
      this.closeModal();
    };

    Modal.prototype.trapFocus = function (event) {
      if (this.firstFocusable == document.activeElement && event.shiftKey) {
        //on Shift+Tab -> focus last focusable element when focus moves out of modal
        event.preventDefault();
        this.lastFocusable.focus();
      }
      if (this.lastFocusable == document.activeElement && !event.shiftKey) {
        //on Tab -> focus first focusable element when focus moves out of modal
        event.preventDefault();
        this.firstFocusable.focus();
      }
    };

    Modal.prototype.getFocusableElements = function () {
      //get all focusable elements inside the modal
      var allFocusable = this.element.querySelectorAll(focusableElString);
      this.getFirstVisible(allFocusable);
      this.getLastVisible(allFocusable);
      this.getFirstFocusable();
    };

    Modal.prototype.getFirstVisible = function (elements) {
      //get first visible focusable element inside the modal
      for (var i = 0; i < elements.length; i++) {
        if (isVisible(elements[i])) {
          this.firstFocusable = elements[i];
          break;
        }
      }
    };

    Modal.prototype.getLastVisible = function (elements) {
      //get last visible focusable element inside the modal
      for (var i = elements.length - 1; i >= 0; i--) {
        if (isVisible(elements[i])) {
          this.lastFocusable = elements[i];
          break;
        }
      }
    };

    Modal.prototype.getFirstFocusable = function () {
      if (!this.modalFocus || !Element.prototype.matches) {
        this.moveFocusEl = this.firstFocusable;
        return;
      }
      var containerIsFocusable = this.modalFocus.matches(focusableElString);
      if (containerIsFocusable) {
        this.moveFocusEl = this.modalFocus;
      } else {
        this.moveFocusEl = false;
        var elements = this.modalFocus.querySelectorAll(focusableElString);
        for (var i = 0; i < elements.length; i++) {
          if (isVisible(elements[i])) {
            this.moveFocusEl = elements[i];
            break;
          }
        }
        if (!this.moveFocusEl) this.moveFocusEl = this.firstFocusable;
      }
    };

    Modal.prototype.emitModalEvents = function (eventName) {
      var event = new CustomEvent(eventName, {detail: this.selectedTrigger});
      this.element.dispatchEvent(event);
    };

    function isVisible(element) {
      return (
        element.offsetWidth ||
        element.offsetHeight ||
        element.getClientRects().length
      );
    }

    addEventListener("load", (event) => {
      window.Modal = Modal;

      //initialize the Modal objects
      var modals = document.getElementsByClassName("js-modal");
      // generic focusable elements string selector
      var focusableElString =
        '[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]), [contenteditable], audio[controls], video[controls], summary';
      if (modals.length > 0) {
        var modalArrays = [];
        for (var i = 0; i < modals.length; i++) {
          (function (i) {
            modalArrays.push(new Modal(modals[i]));
          })(i);
        }

        window.addEventListener("keydown", function (event) {
          //close modal window on esc
          if (
            (event.keyCode && event.keyCode == 27) ||
            (event.key && event.key.toLowerCase() == "escape")
          ) {
            for (var i = 0; i < modalArrays.length; i++) {
              (function (i) {
                modalArrays[i].closeModal();
              })(i);
            }
          }
        });
      }
    });
  })();
</script>
